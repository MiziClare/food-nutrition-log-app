@baseUrl = http://localhost:8080

### 测试方法：修改第11行的 filename 和第14行的 "<" 右侧内容改到一个本地存储图片的 文件名 / 路径；点击左侧测试按钮运行此脚本

### Upload salad image -> analyze and log ingredients
POST {{baseUrl}}/ai/agent/upload
Accept: application/json
Content-Type: multipart/form-data; boundary=WebAppBoundary

--WebAppBoundary
Content-Disposition: form-data; name="file"; filename="dish1.png"
Content-Type: image/png

< E:\图片\dish1.png
--WebAppBoundary
Content-Disposition: form-data; name="userId"

1
--WebAppBoundary
Content-Disposition: form-data; name="notes"

Salad for lunch
--WebAppBoundary--

> {%
let body;
try {
  if (typeof response.body === 'string') {
    body = JSON.parse(response.body);
  } else {
    // In some environments, response.body may already be a parsed object
    body = response.body;
  }
  client.assert(body && body.status === "SUCCESS", "status should be SUCCESS, got " + (body && body.status));
  if (body && body.logId) {
    client.global.set("logId", String(body.logId));
    client.log("logId=" + body.logId);
  } else {
    client.log("No logId returned. Body=" + JSON.stringify(body));
  }
} catch (e) {
  const textBody = typeof response.body === 'string' ? response.body : JSON.stringify(response.body);
  client.log("Non-JSON or unparsable response: " + textBody);
  client.assert(false, "Response is not valid JSON: " + e.message);
}
%}


### Test openai api key
GET http://localhost:8080/ai/chat?prompt=你好,请介绍一下自己&chatId=456
Accept: text/html

### --- Logs APIs ---
@logId = 6
### Get a single log by ID (includes ingredients)
GET {{baseUrl}}/logs/{{logId}}
Accept: application/json

### Get all logs for a user (path variable)
GET {{baseUrl}}/logs/user/1
Accept: application/json

### Get all logs for a user (query parameter)
GET {{baseUrl}}/logs?userId=1
Accept: application/json

### Delete a single log by ID (also deletes its ingredients first)
DELETE {{baseUrl}}/logs/{{logId}}
Accept: application/json

### --- Users APIs ---
### Register user
POST {{baseUrl}}/users/register
Content-Type: application/json

{
  "name": "Bob",
  "email": "bob@example.com",
  "password": "secret"
}

### Login user
POST {{baseUrl}}/users/login
Content-Type: application/json

{
  "email": "bob@example.com",
  "password": "secret"
}

### Create user
POST {{baseUrl}}/users
Content-Type: application/json

{
  "name": "Alice",
  "email": "alice@example.com",
  "password": "secret"
}

### Get user by email
GET {{baseUrl}}/users?email=alice@example.com
Accept: application/json

### Get user by ID
GET {{baseUrl}}/users/1
Accept: application/json

### Update user
PUT {{baseUrl}}/users/1
Content-Type: application/json

{
  "name": "Alice Updated",
  "email": "alice@example.com",
  "password": "secret"
}

### Delete user
DELETE {{baseUrl}}/users/1
Accept: application/json
